import os
import sys
import psycopg2
from psycopg2 import OperationalError
from faker import Faker


# get the database connection details from the environment
DATABASE_NAME = os.getenv('DATABASE_NAME')
DATABASE_USER = os.getenv('DATABASE_USER')
DATABASE_PASS = os.getenv('DATABASE_PASS')
DATABASE_HOST = os.getenv('DATABASE_HOST')
DATABASE_PORT = os.getenv('DATABASE_PORT')

try:
    # connect to the database
    connection = psycopg2.connect(
            database=DATABASE_NAME,
            user=DATABASE_USER,
            password=DATABASE_PASS,
            host=DATABASE_HOST,
            port=DATABASE_PORT,
            )
except OperationalError as error:
    print(f"Unable to connect to the database {DATABASE_NAME} on port {DATABASE_PORT}")
    sys.exit(error)

# create a cursor object and get the database version information
cursor = connection.cursor()
cursor.execute("select version()")

# fetch a single row using fetchone() method.
data = cursor.fetchone()
print("Connection established to: ", data)

# drop the employee table
cursor.execute("DROP TABLE IF EXISTS EMPLOYEES")

# create the employee table
sql = '''
    CREATE TABLE EMPLOYEES(
        id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        FIRST_NAME CHAR(60) NOT NULL,
        LAST_NAME CHAR(60) NOT NULL
    )
'''

cursor.execute(sql)
connection.commit()
print("Table created successfully........")

# generate test data for 100 employees
print("Generating test data for 5 employees")
fake = Faker()

for i in range(0,100):
    first_name = fake.first_name()
    last_name  = fake.last_name()

    sql = f"INSERT INTO EMPLOYEES(id,FIRST_NAME,LAST_NAME) VALUES(DEFAULT,'{first_name}','{last_name}');"
    cursor.execute(sql)
    connection.commit()

# read the data
sql = "SELECT * FROM EMPLOYEES"
cursor.execute(sql)
employees = cursor.fetchall()

# print the data
for employee in employees:
    (id_number, first_name, last_name) = employee
    print(f"ID         = {id_number}")
    print(f"FIRST_NAME = {first_name}")
    print(f"LAST_NAME  = {last_name}\n\n")

# close the database connection.
cursor.close()
connection.close()
print("DB connection is closed")
